name: Windows

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: windows-latest

    strategy:
      #fail-fast: false
      matrix:
        config:
          - {
              name: Windows x64,
              platform: x64
            }
          - {
              name: Windows x64-avx2,
              platform: x64,
              extra: "-DDUNE_TARGET_ARCHITECTURE_EXTENSION:STRING=\"avx2\"",
              name_postfix: "-avx2"
            }
          - {
              name: Windows x86,
              platform: x86
            }
          - {
              name: Windows ARM64,
              platform: arm64
            }
    steps:
      - name: Fetch repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
          path: source

      - name: Export Environment
        run: |
          function Export-WorkflowValue ([string]$name, [string]$value) {
            Write-Output "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          function New-NormalizedDirectory ([string]$name, [string]$path) {
            $value = (New-Item -Path $path -ItemType Directory -Force).FullName
            Export-WorkflowValue $name $value
            Return $value
          }
          $platform = '${{matrix.config.platform}}'
          $root = (Resolve-Path -LiteralPath $Env:GITHUB_WORKSPACE).Path
          $source = (Resolve-Path -LiteralPath (Join-Path $root -ChildPath 'source')).Path
          cd $source
          $git_origin_url = (git config --get remote.origin.url)
          $git_master_ref = (git ls-remote "$git_origin_url" master) -split '\s+' | select -First 1
          git merge-base --is-ancestor "$git_master_ref" HEAD
          If($LASTEXITCODE -ne 0) {
            git fetch --deepen 100 origin master:master
            $git_master_ref = (git merge-base master $Env:GITHUB_SHA)
          }
          $git_describe = git describe --tags --dirty --always --exclude "latest-*"
          $git_describe_master = git describe --always --tags $git_master_ref
          Export-WorkflowValue 'PROJECT_GIT_ORIGIN_URL' $git_origin_url
          Export-WorkflowValue 'PROJECT_GIT_MASTER_REF' $git_master_ref
          Export-WorkflowValue 'PROJECT_GIT_DESCRIBE' $git_describe
          Export-WorkflowValue 'PROJECT_GIT_DESCRIBE_MASTER' $git_describe_master
          Export-WorkflowValue 'PROJECT_SOURCE' $source
          $build = New-NormalizedDirectory 'PROJECT_BUILD' (Join-Path $root -ChildPath ( 'build\Release-{0}' -f $platform ))
          Export-WorkflowValue 'PROJECT_TOOLS' (Join-Path $root -ChildPath 'tools')
          Export-WorkflowValue 'PROJECT_TOOLS_TMP' (Join-Path $root -ChildPath 'tools.tmp')
          $output_name = 'dunelegacy-{0}${{matrix.config.name_postfix}}-{1}' -f $platform, $git_describe
          $zip_name =   $output_name + '.zip'
          $msi_zip_name =   'MSI-' + $output_name + '.zip'
          $exe_zip_name =   'Setup-' + $output_name + '.zip'
          Export-WorkflowValue 'PROJECT_OUTPUT_NAME' $output_name
          Export-WorkflowValue 'PROJECT_ZIP' (Join-Path $build -ChildPath $zip_name)
          Export-WorkflowValue 'PROJECT_ZIP_NAME' $zip_name
          Export-WorkflowValue 'PROJECT_MSI' (Join-Path $build -ChildPath ($output_name + '.msi'))
          Export-WorkflowValue 'PROJECT_MSI_ZIP' (Join-Path $build -ChildPath $msi_zip_name)
          Export-WorkflowValue 'PROJECT_MSI_ZIP_NAME' $msi_zip_name
          Export-WorkflowValue 'PROJECT_INSTALLER' (Join-Path $build -ChildPath ($output_name + '.exe'))
          Export-WorkflowValue 'PROJECT_INSTALLER_ZIP' (Join-Path $build -ChildPath $exe_zip_name)
          Export-WorkflowValue 'PROJECT_INSTALLER_ZIP_NAME' $exe_zip_name
          Export-WorkflowValue 'PROJECT_LATEST_TAG' 'latest-${{matrix.config.platform}}${{matrix.config.name_postfix}}'

      - name: vcpkg
        shell: cmd
        run: source\IDE\VC\vcpkg\build_vcpkg.bat --triplet ${{matrix.config.platform}}-windows-ltcg

      - name: Compile
        shell: cmd
        run: |
          call "source\IDE\VC\findmsvc.bat" -host_arch=x64 -arch=${{matrix.config.platform}} -startdir=none
          set CC=cl.exe
          set CXX=cl.exe
          cmake -G Ninja -DDUNE_TARGET_ARCHITECTURE=${{matrix.config.platform}} -DVCPKG_TARGET_TRIPLET:STRING=${{matrix.config.platform}}-windows-ltcg "${{matrix.config.extra}}" "-DTARGET_MSI_NAME=%PROJECT_OUTPUT_NAME%" -DCMAKE_BUILD_TYPE=Release -S "%PROJECT_SOURCE%" -B "%PROJECT_BUILD%"
          cmake --build "%PROJECT_BUILD%"

      - name: Test
        shell: cmd
        if: matrix.config.platform != 'arm64'
        run: |
          call "source\IDE\VC\findmsvc.bat" -host_arch=x64 -arch=${{matrix.config.platform}} -startdir=none
          cd "%PROJECT_BUILD%"
          ctest

      - name: Build Installer
        shell: cmd
        run: |
          call "source\IDE\VC\findmsvc.bat" -host_arch=x64 -arch=${{matrix.config.platform}} -startdir=none
          cd "%PROJECT_BUILD%"
          cpack -G ZIP -v

      - name: Upload Binaries Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_ZIP_NAME}}
          path: ${{env.PROJECT_ZIP}}

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Setup ${{env.PROJECT_OUTPUT_NAME}}
          path: ${{env.PROJECT_INSTALLER}}

      - name: Prepare for release
        if: contains(github.ref, 'modernize')
        shell: cmd
        run: |
          cd "%PROJECT_SOURCE%"
          git tag -d "%PROJECT_LATEST_TAG%"
          git push -d origin "%PROJECT_LATEST_TAG%"
          exit 0

      - name: Create Release
        id: create_release
        if: contains(github.ref, 'modernize')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{env.PROJECT_LATEST_TAG}}
          release_name: ${{env.PROJECT_OUTPUT_NAME}}
          draft: false
          prerelease: true

      - name: Upload Release ZIP
        if: contains(github.ref, 'modernize')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{env.PROJECT_ZIP}}
          asset_name: ${{env.PROJECT_ZIP_NAME}}
          asset_content_type: application/zip
