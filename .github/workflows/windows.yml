name: Windows

on:
  push:
  pull_request:

jobs:
  build:
    runs-on: windows-2022

    outputs:
      is_release: ${{ steps.export.outputs.is_release }}
    strategy:
      #fail-fast: false
      matrix:
        include:
          - name: Windows x64
            platform: x64
            preset: windows-x64-release
          - name: Windows x64-avx2
            platform: x64
            name_postfix: "-avx2"
            preset: windows-x64-avx2-release
          - name: Windows x86
            platform: x86
            preset: windows-x86-release
          - name: Windows ARM64
            platform: arm64
            preset: windows-arm64-release
    steps:
      - name: Fetch repo
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          submodules: recursive
          path: source

      #- name: Install Ninja
      #  shell: cmd
      #  run: choco install --yes ninja

      - name: Export Environment
        id: export
        run: |
          function Export-WorkflowValue ([string]$name, [string]$value) {
            Write-Output "$name=$value" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          function New-NormalizedDirectory ([string]$name, [string]$path) {
            $value = (New-Item -Path $path -ItemType Directory -Force).FullName
            Export-WorkflowValue $name $value
            Return $value
          }
          function Export-OutputValue ([string]$name, [string]$value) {
            Write-Output "::set-output name=$name::$value"
          }
          $is_release = $Env:GITHUB_REF -match '^refs/tags/v\d+\.\d+\.\d+\w*-\d+\.\d+\.\d+$'
          Export-OutputValue 'is_release' $is_release
          $platform = '${{matrix.platform}}${{matrix.name_postfix}}'
          $root = (Resolve-Path -LiteralPath $Env:GITHUB_WORKSPACE).Path
          $source = (Resolve-Path -LiteralPath (Join-Path $root -ChildPath 'source')).Path
          cd $source
          $git_origin_url = (git config --get remote.origin.url)
          $git_master_ref = (git ls-remote "$git_origin_url" master) -split '\s+' | select -First 1
          git merge-base --is-ancestor "$git_master_ref" HEAD
          If($LASTEXITCODE -ne 0) {
            git fetch --deepen 100 origin master:master
            $git_master_ref = (git merge-base master $Env:GITHUB_SHA)
          }
          $git_describe = git describe --tags --dirty --always --exclude "latest-*"
          $git_describe_master = git describe --always --tags $git_master_ref
          Export-WorkflowValue 'PROJECT_GIT_ORIGIN_URL' $git_origin_url
          Export-WorkflowValue 'PROJECT_GIT_MASTER_REF' $git_master_ref
          Export-WorkflowValue 'PROJECT_GIT_DESCRIBE' $git_describe
          Export-WorkflowValue 'PROJECT_GIT_DESCRIBE_MASTER' $git_describe_master
          Export-WorkflowValue 'PROJECT_SOURCE' $source
          $build = New-NormalizedDirectory 'PROJECT_BUILD' (Join-Path $root -ChildPath "build\Release-$platform" )
          $build_relative_unix = "build/Release-$platform"
          Export-WorkflowValue 'PROJECT_TOOLS' (Join-Path $root -ChildPath 'tools')
          Export-WorkflowValue 'PROJECT_TOOLS_TMP' (Join-Path $root -ChildPath 'tools.tmp')
          $output_name = "dunelegacy-$platform-$git_describe"
          $zip_name =   $output_name + '.zip'
          $msi_zip_name =   'MSI-' + $output_name + '.zip'
          $exe_zip_name =   'Setup-' + $output_name + '.zip'
          Export-WorkflowValue 'PROJECT_OUTPUT_NAME' $output_name
          Export-WorkflowValue 'PROJECT_ZIP' (Join-Path $build -ChildPath $zip_name)
          Export-WorkflowValue 'PROJECT_ZIP_RELATIVE_UNIX' ($build_relative_unix + "/" + $zip_name)
          Export-WorkflowValue 'PROJECT_ZIP_NAME' $zip_name
          Export-WorkflowValue 'PROJECT_MSI' (Join-Path $build -ChildPath ($output_name + '.msi'))
          Export-WorkflowValue 'PROJECT_MSI_ZIP' (Join-Path $build -ChildPath $msi_zip_name)
          Export-WorkflowValue 'PROJECT_MSI_ZIP_NAME' $msi_zip_name
          Export-WorkflowValue 'PROJECT_INSTALLER' (Join-Path $build -ChildPath ($output_name + '.exe'))
          Export-WorkflowValue 'PROJECT_INSTALLER_ZIP' (Join-Path $build -ChildPath $exe_zip_name)
          Export-WorkflowValue 'PROJECT_INSTALLER_ZIP_NAME' $exe_zip_name
          Export-WorkflowValue 'PROJECT_LATEST_TAG' "latest-$platform"
          Export-WorkflowValue 'PROJECT_VCPKG_TRIPLET' "$platform-windows-ltcg"
          $vs = Get-VSSetupInstance | Select-VSSetupInstance -Latest -Require @('Microsoft.VisualStudio.Component.VC.Tools.x86.x64', 'Microsoft.VisualStudio.Component.VC.Tools.ARM64', 'Microsoft.VisualStudio.Component.VC.CMake.Project')
          $vsdevcmd_path = (Resolve-Path -LiteralPath (Join-Path $vs.InstallationPath -ChildPath 'Common7/Tools/VsDevCmd.bat')).Path
          Export-WorkflowValue 'VSDEVCMD_PATH' $vsdevcmd_path

      - name: vcpkg
        shell: cmd
        run: |
          call "%VSDEVCMD_PATH%" -host_arch=x64 -arch=${{matrix.platform}} -startdir=none
          source\external\vcpkg\build_vcpkg.bat --triplet %PROJECT_VCPKG_TRIPLET%

      - name: Compile
        shell: cmd
        run: |
          call "%VSDEVCMD_PATH%" -host_arch=x64 -arch=${{matrix.platform}} -startdir=none
          cmake -G Ninja --preset "${{matrix.preset}}" "-DTARGET_MSI_NAME=%PROJECT_OUTPUT_NAME%" -S "%PROJECT_SOURCE%" -B "%PROJECT_BUILD%"
          cmake --build "%PROJECT_BUILD%"

      - name: Test
        shell: cmd
        if: matrix.platform != 'arm64'
        run: |
          call "%VSDEVCMD_PATH%" -host_arch=x64 -arch=${{matrix.platform}} -startdir=none
          cd "%PROJECT_BUILD%"
          ctest

      - name: Build Installer
        shell: cmd
        run: |
          call "%VSDEVCMD_PATH%" -host_arch=x64 -arch=${{matrix.platform}} -startdir=none
          cd "%PROJECT_BUILD%"
          cpack -G ZIP -v

      - name: Upload Binaries Artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{env.PROJECT_ZIP_NAME}}
          path: ${{env.PROJECT_ZIP}}

      - name: Upload Installer Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Setup ${{env.PROJECT_OUTPUT_NAME}}
          path: ${{env.PROJECT_INSTALLER}}

      - name: Create Release
        if: contains(github.ref, 'modernize')
        uses: marvinpinto/action-automatic-releases@v1.2.1
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: ${{env.PROJECT_LATEST_TAG}}
          title: ${{env.PROJECT_OUTPUT_NAME}}
          draft: false
          prerelease: true
          files: |
            ${{env.PROJECT_ZIP_RELATIVE_UNIX}}

  release:
    needs: build
    if: needs.build.outputs.is_release == 'True'
    runs-on: windows-2022

    steps:
      - name: Collect artifacts
        uses: actions/download-artifact@v3
        with:
          path: .

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*.zip
          draft: true
          prerelease: false

